/* WizardController.java
 * Created on 24. April 2007, 10:35
 * @author Christian Gruber Bakk.techn.
 */

package ttt.gui.wizard.framework;

import java.awt.AWTException;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;

import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;

import ttt.Recorder;
import ttt.TTT;
import ttt.gui.wizard.recorder.AdvicePanelDescriptor;
import ttt.gui.wizard.recorder.AfterRecordingPanel;
import ttt.gui.wizard.recorder.VideoPanelDescriptor;
import ttt.player.Player;
import ttt.record.LectureProfile;


/**
 * The wizard controller is responsible for all wizard actions (next, back, cancel)
 */
public class WizardController extends javax.swing.JFrame {
    
    private WizardModel m_WizardModel;
    private LectureProfile m_Profile;
    private String m_Language;
    
    private MenuItem  stopItem;
    private MenuItem startItem;
    private MenuItem exitItem;
    
    /**
     * Creates new form WizardController
     */
    public WizardController(String language) {
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setTitle("TeleTeachingRecorder");
        m_Language = language;
        m_Profile = null;
        m_WizardModel = new WizardModel();
        initComponents();
        setLocationRelativeTo(null);
        
        
        if(m_Language == "EN"){
            jButtonNext.setText("Next");
            jButtonCancel.setText("Cancel");
            jButtonBack.setText("Back");
        } else {
            jButtonNext.setText("Weiter");
            jButtonCancel.setText("Abbrechen");
            jButtonBack.setText("Zurï¿½ck");
        }
    }
    
    
    
    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelCard = new javax.swing.JPanel();
        jPanelActions = new javax.swing.JPanel();
        jButtonBack = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(getClass().getResource("/ttt/wizard/recorder/images/Recorder_32.gif")).getImage());
        setMinimumSize(new java.awt.Dimension(500, 600));
        setResizable(false);
        jPanelCard.setLayout(new java.awt.CardLayout());

        jPanelCard.setMaximumSize(new java.awt.Dimension(480, 500));
        jPanelCard.setMinimumSize(new java.awt.Dimension(480, 500));
        jPanelCard.setPreferredSize(new java.awt.Dimension(480, 500));
        jPanelCard.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanelCard, gridBagConstraints);

        jPanelActions.setMaximumSize(new java.awt.Dimension(450, 60));
        jPanelActions.setMinimumSize(new java.awt.Dimension(450, 60));
        jPanelActions.setPreferredSize(new java.awt.Dimension(450, 60));
        jPanelActions.setRequestFocusEnabled(false);
        jButtonBack.setMaximumSize(new java.awt.Dimension(63, 26));
        jButtonBack.setMinimumSize(new java.awt.Dimension(63, 26));
        jButtonBack.setPreferredSize(new java.awt.Dimension(63, 26));
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonCancel.setMaximumSize(new java.awt.Dimension(73, 26));
        jButtonCancel.setMinimumSize(new java.awt.Dimension(73, 26));
        jButtonCancel.setPreferredSize(new java.awt.Dimension(73, 26));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonNext.setMaximumSize(new java.awt.Dimension(60, 26));
        jButtonNext.setMinimumSize(new java.awt.Dimension(60, 26));
        jButtonNext.setPreferredSize(new java.awt.Dimension(60, 26));
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        GroupLayout jPanelActionsLayout = new GroupLayout(jPanelActions);
        jPanelActions.setLayout(jPanelActionsLayout);
        jPanelActionsLayout.setHorizontalGroup(
            jPanelActionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanelActionsLayout.createSequentialGroup()
                .addContainerGap(164, Short.MAX_VALUE)
                .addComponent(jButtonBack, GroupLayout.PREFERRED_SIZE, 83, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNext, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButtonCancel, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE))
            .addComponent(jSeparator1, GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );

        jPanelActionsLayout.linkSize(SwingConstants.HORIZONTAL, jButtonBack, jButtonCancel, jButtonNext);

        jPanelActionsLayout.setVerticalGroup(
            jPanelActionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelActionsLayout.createSequentialGroup()
                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanelActionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCancel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonNext, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBack, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanelActionsLayout.linkSize(SwingConstants.VERTICAL,jButtonBack, jButtonCancel, jButtonNext);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        getContentPane().add(jPanelActions, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        
        this.closeWizard(1);
    }//GEN-LAST:event_jButtonCancelActionPerformed
    
    
    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        
        WizardPanelDescriptor wizardPanelDescriptor = m_WizardModel.getCurrentPanelDescriptor();
        Object obj = wizardPanelDescriptor.getNextComponentDescriptor();
        
        if(obj instanceof WizardPanelDescriptor.FinishIdentifier) {
            this.closeWizard(0);
        } else {
            this.setCurrentPanel(obj);
        }
    }//GEN-LAST:event_jButtonNextActionPerformed
    
    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        
        WizardPanelDescriptor wizardPanelDescriptor = m_WizardModel.getCurrentPanelDescriptor();
        Object obj = wizardPanelDescriptor.getLastComponentDescriptor();
        this.setCurrentPanel(obj);
    }//GEN-LAST:event_jButtonBackActionPerformed
    
    
    public void startWizard(){
        setVisible(true);
    }
    
    /**
     * Registers a new created panel to the card panel and to the wizard model
     * @param obj identifier of the panel and descriptor
     * @param wizardpaneldescriptor the descrtiptor which belongs to the panel
     */
    public void registerWizardPanel(Object obj, WizardPanelDescriptor wizardpaneldescriptor) {
        jPanelCard.add(wizardpaneldescriptor.getComponent(),obj);
        wizardpaneldescriptor.setWizardControler(this);
        m_WizardModel.registerPanel(obj, wizardpaneldescriptor);
    }
    
    /**
     * Sets the current panel. Will be invoked by the next button on the framework
     * @param obj the panel which is shown next
     */
    public void setCurrentPanel(Object obj) {
        if(obj == null) {
            closeWizard(2);
        }
        WizardPanelDescriptor wizardPanelDescriptor = m_WizardModel.getCurrentPanelDescriptor();
        if(wizardPanelDescriptor != null) {
            wizardPanelDescriptor.afterDisplayingPanel();
        }
        m_WizardModel.setCurrentPanel(obj);
        m_WizardModel.getCurrentPanelDescriptor().beforeDisplayingPanel();
        ((CardLayout)jPanelCard.getLayout()).show(jPanelCard, obj.toString());
        
        m_WizardModel.getCurrentPanelDescriptor().displayingPanel();
    }
    
    /**
     * Enables or deactivates the next button
     * @param enable true if the next button is enable
     */
    public void setNextButton(boolean enable){
        jButtonNext.setEnabled(enable);
    }
    
    /**
     * Enables or deactivates the back button
     * @param enable true if the back button is enable
     */
    public void setBackButton(boolean enable){
        jButtonBack.setEnabled(enable);
    }
    
    /**
     * Enables or deactivates the cancel button
     * @param enable true if the cancel button is enable
     */
    public void setCancelButton(boolean enable){
        jButtonCancel.setEnabled(enable);
    }
    
    /**
     * Sets the next button text to finish
     * @param finish true if the next button should switch to a finish button
     */
    public void setNextButtonToFinsh(boolean finish){
        if(finish){
            if(m_Language == "EN")
                jButtonNext.setText("Finish");
            else
                jButtonNext.setText("Fertig");
        }else{
            if(m_Language == "EN")
                jButtonNext.setText("Next");
            else
                jButtonNext.setText("Weiter");
        }
    }
    
    /**
     * Gets the lecture profile for recording, starts
     * the recorder and closes the wizard.
     * @param ReturnCode 1: Program Aborted by User
     */
    private void closeWizard(int returnCode) {
        
        //Cancel and Close Program
        if(returnCode == 1){
            if(m_Language == "EN"){
                if(JOptionPane.showConfirmDialog(this,"Cancel and close program?","Exit",JOptionPane.CANCEL_OPTION) == 0)
                    System.exit(-1);
            } else
                if(JOptionPane.showConfirmDialog(this,"Programm beenden?","Warnung",JOptionPane.CANCEL_OPTION) == 0)
                    System.exit(-1);
        }
        
        //Close Wizard and Start Recording
        if(returnCode == 0){
            // if finish identifier is set get the lecture profile,
            // and start recording before closing the wizard
            WizardPanelDescriptor[] panels = m_WizardModel.getAllPanelDescriptors();
            boolean videorecording = false;
            for(int i=0; i<panels.length; i++){
                
                //if it is the video panel check if the video can be loaded
                if(panels[i] instanceof VideoPanelDescriptor){
                    VideoPanelDescriptor vpd =  (VideoPanelDescriptor)panels[i];
                    if(vpd.isVideoEnable())
                        videorecording = true;
                    else
                        videorecording = false;
                    
                    //deallocate video stream, so that it can be recorded by the original TTT
                    vpd.deallocatePlayerResource();
                }
                
                //check if the control info should be shown next time
                else if (panels[i] instanceof AdvicePanelDescriptor){
                    if(m_Profile.isShowRecordControlsInfo()){
                        AdvicePanelDescriptor apd = (AdvicePanelDescriptor)panels[i];
                        m_Profile.setShowRecordControlsInfo(apd.isShowNextTimeSelected());
                        m_Profile.storeProfile();
                    }
                }
            }
            
            if(videorecording)
                m_Profile.setRecordVideoEnabled(true);
            else
                m_Profile.setRecordVideoEnabled(false);
            
            m_Profile.setLoopbackRecorder(true);
            m_Profile.setRecordEnabled(true);
            
            //close the wizard
            this.setVisible(false);
            
//            //check screen resolution
//            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//            if(screenSize.height > 768 || screenSize.width > 1024){
//                if(m_Language == "EN"){
//                    JOptionPane.showMessageDialog(this, "The current VNC desktop size is "+screenSize.width
//                            +"x"+screenSize.height+".\n" +
//                            "A size of up to 1024x768 is recommended.","Warning: large resolution", JOptionPane.WARNING_MESSAGE);
//                } else{
//                    JOptionPane.showMessageDialog(this, "Die aktuelle Desktop Auflï¿½sung betrï¿½gt: "+screenSize.width
//                            +"x"+screenSize.height+".\n" +
//                            "Eine Auflï¿½sung von 1024x768 wird empfohlen.","Warnung: zu hohe Auflï¿½sung", JOptionPane.WARNING_MESSAGE);
//                }
//            }
            
            
            //check if tray icons are supported
            if (SystemTray.isSupported()) {
                new Thread(new Runnable() {
                    public void run() {
                        try {
                            Player presenter = new Player(m_Profile);
                            final Recorder recorder = presenter.getRecorder();
                            
                            if(m_Language == "EN"){
                                stopItem = new MenuItem("Stop Recording");
                                startItem = new MenuItem("Start Recording");
                                exitItem = new MenuItem("Quit");
                            } else{
                                stopItem = new MenuItem("Aufnahme Stoppen");
                                startItem = new MenuItem("Aufnahme Starten");
                                exitItem = new MenuItem("Beenden");
                            }
                            
                            final TrayIcon trayIcon;
                            final Image TTR = (new ImageIcon(getClass().getResource("/ttt/wizard/recorder/images/Recorder_128.gif"))).getImage();
                            final Image TTR_REC = (new ImageIcon(getClass().getResource("/ttt/wizard/recorder/images/Recording_128.gif"))).getImage();
                            
                            final PopupMenu popup = new PopupMenu();
                            
                            trayIcon = new TrayIcon(TTR, "TeleTeachingTool", popup);
                            trayIcon.setImageAutoSize(true);
                            
                            
                            
                            MouseListener mouseListener = new MouseListener() {
                                public void mouseClicked(MouseEvent e) {
                                    if(e.getButton() == 1)
                                        if(m_Language == "EN")
                                            trayIcon.displayMessage("Info", "Use Right Mouse Button",TrayIcon.MessageType.INFO);
                                        else
                                            trayIcon.displayMessage("Info", "Benï¿½tzen Sie die rechte Maustaste",TrayIcon.MessageType.INFO);
                                }
                                
                                public void mouseEntered(MouseEvent e) {
                                }
                                
                                public void mouseExited(MouseEvent e) {
                                }
                                
                                public void mousePressed(MouseEvent e) {
                                }
                                
                                public void mouseReleased(MouseEvent e) {
                                }
                            };
                            
                            ActionListener exitListener = new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    
                                    //close VNC Server
                                    try {
                                        String stopVNC = "UltraVNC" +File.separatorChar +"winvnc.exe -kill";
                                        Runtime.getRuntime().exec(stopVNC);
                                    } catch (IOException ex) {
                                        System.out.println("Could not stop VNC Server from local directory: " + ex);
                                    }
                                    
                                    System.out.println("Exiting...");
                                    System.exit(0);
                                }
                            };
                            
                            ActionListener startRecordingListener = new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    stopItem.setEnabled(true);
                                    startItem.setEnabled(false);
                                    trayIcon.setImage(TTR_REC);
                                    try {
                                        recorder.startRec();
                                        exitItem.setEnabled(false);
                                    } catch (IOException ex) {
                                        
                                        if(m_Language.equalsIgnoreCase("EN"))
                                            JOptionPane.showMessageDialog(null, "Could not find recording file or path." +
                                                    "Program will exit.");
                                        else
                                            JOptionPane.showMessageDialog(null, "Der Speicherort fï¿½r die Aufnahme existiert nicht." +
                                                    "Das Programm wird beendet.");
                                        
                                        //close VNC Server
                                        String stopVNC = "UltraVNC" +File.separatorChar +"winvnc.exe -kill";
                                        try {
                                            Runtime.getRuntime().exec(stopVNC);
                                        } catch (IOException exc) {
                                            exc.printStackTrace();
                                        }
                                        System.exit(-1);
                                    }
                                }
                            };
                            
                            ActionListener stopRecordingListener = new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    trayIcon.setImage(TTR);
                                    
                                    //show processing dialog
                                    JProgressBar progressBar;
                                    progressBar = new JProgressBar();
                                    progressBar.setIndeterminate(true);
                                    JPanel panel = new JPanel();
                                    panel.setLayout(new GridLayout());
                                    panel.add(progressBar);
                                    final JDialog dialog = new JDialog();
                                    dialog.setIconImage(new ImageIcon(getClass().getResource("/ttt/wizard/recorder/images/Recorder_128.gif")).getImage());
                                    if(m_Language == "EN")
                                        dialog.setTitle("Recordings will be processed");
                                    else
                                        dialog.setTitle("Aufnahme wird bearbeitet");
                                    dialog.getContentPane().add(panel);
                                    dialog.setMinimumSize(new Dimension(300,50));
                                    dialog.setLocationRelativeTo(null);
                                    dialog.setVisible(true);
                                    
                                    SwingWorker worker = new SwingWorker<Boolean, Void>() {
                                        @Override
                                        protected Boolean doInBackground() throws Exception {
                                            try {
                                                recorder.stopRec();
                                            } catch (IOException ex) {
                                                JOptionPane.showMessageDialog(null, "Could not save recordings." +
                                                        "Program will exit.");
                                                System.exit(-1);
                                            }
                                            return true;
                                        }
                                        
                                        @Override
                                        protected void done() {
                                            try {
                                                dialog.setVisible(false);
                                                showInfoAfterRecording();
                                            } catch ( Exception e ) { }
                                        }
                                    };
                                    worker.execute();
                                }
                            };
                            
                            //Create Tray Icon and Entries
                            trayIcon.addMouseListener(mouseListener);
                            SystemTray tray = SystemTray.getSystemTray();
                            exitItem.addActionListener(exitListener);
                            startItem.addActionListener(startRecordingListener);
                            stopItem.addActionListener(stopRecordingListener);
                            stopItem.setEnabled(false);
                            popup.add(startItem);
                            popup.add(stopItem);
                            popup.addSeparator();
                            popup.add(exitItem);
                            
                            try {
                                tray.add(trayIcon);
                            } catch (AWTException e) {
                                System.err.println("TrayIcon could not be added. Program will Exit");
                                System.exit(-1);
                            }
                            
                        } catch (IOException ex) {
                            System.err.println("Recorder could not be started. Program will Exit");
                            System.exit(-1);
                        }
                    }
                }).start();
                
                // System Tray is not supported start original presenter
            } else {
                try {
                    // start presenter
                    // NOTE: get out of event dispatching thread
                    new Thread(new Runnable() {
                        public void run() {
                            TTT.createPresenter(m_Profile);
                        }
                    }).start();
                } catch(Exception e){
                    System.err.println("Recorder could not be started. Program will exit!");
                    System.exit(-1);
                }
            }
        }
    }
    
    /**
     * Returns the current lecture profile
     */
    public LectureProfile getProfile(){
        return m_Profile;
    }
    
    /**
     * Sets the lecture profile
     */
    public void setProfile(LectureProfile profile){
        m_Profile = profile;
    }
    
    /**
     * Shows the info dialog which lets the user decide
     * to resume recording or stop and quit
     */
    private void showInfoAfterRecording(){
        
        final JFrame infoFrame = new JFrame();
        ActionListener infoDialogListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if(e.getActionCommand().equalsIgnoreCase("Quit")) {
                    //close VNC Server
                    try {
                        String stopVNC = "UltraVNC" +File.separatorChar +"winvnc.exe -kill";
                        Runtime.getRuntime().exec(stopVNC);
                    } catch (IOException ex) {
                        System.out.println("Could not stop VNC Server from local directory: " + ex);
                    }
                    
                    System.out.println("Exiting...");
                    System.exit(0);
                } else{
                    //activate trayicon
                    startItem.setEnabled(true);
                    exitItem.setEnabled(true);
                    infoFrame.setVisible(false);
                }
            }
        };
        
        AfterRecordingPanel afterPanel = new AfterRecordingPanel(m_Language);
        afterPanel.addButtonListener(infoDialogListener);
        infoFrame.getContentPane().add(afterPanel);
        infoFrame.setMinimumSize(new Dimension(560,500));
        infoFrame.setIconImage(new ImageIcon(getClass().getResource("/ttt/wizard/recorder/images/Recorder_128.gif")).getImage());
        if(m_Language == "EN")
            infoFrame.setTitle("Advices");
        else
            infoFrame.setTitle("Hinweis");
        infoFrame.setLocationRelativeTo(null);
        infoFrame.setVisible(true);
        stopItem.setEnabled(false);
        startItem.setEnabled(false);
        exitItem.setEnabled(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JPanel jPanelActions;
    private javax.swing.JPanel jPanelCard;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    
}
